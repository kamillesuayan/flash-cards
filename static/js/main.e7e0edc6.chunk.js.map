{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CreateCard","state","word","description","showError","this","setState","errorMessage","className","onClick","props","onShadowClick","id","placeholder","value","onChange","e","target","length","setTimeout","hideError","Immutable","Map","onCreateCard","React","Component","Header","showModal","Card","showAnswer","content","backContent","frontContent","iconClass","cardClass","contentClass","actionClass","cardNumber","showPrevCard","showNextCard","CardContainer","cards","fromJS","boundCallback","hideCreateCard","bind","boundCreateCard","setCard","boundShowPrevCard","boundShowNextCard","size","card","newCards","push","map","get","toJS","generateCards","App","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7e0edc6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Immutable from \"immutable\";\nimport \"./App.css\";\n\nclass CreateCard extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      word: '',\n      description: '',\n      showError: false\n    }\n  }\n    \n  hideError() {\n    this.setState({showError: !this.state.showError});\n  }\n  \n  render() {\n    const errorMessage = this.state.showError ? 'Please fill in the word and description!' : '';\n    return (\n      <div className='create-card'>\n        <div \n          className='create-card__shadow'\n          onClick={() => {\n            this.props.onShadowClick();\n          }}\n        >\n        </div>\n        <div className='create-card__body'>\n          <h1>Create New Card</h1>\n          <div className='create-card__input-wrapper'>\n            <input \n              id='word' \n              placeholder=\"Word i.e. 'React'\"\n              value = {this.state.word}\n              onChange = {(e) => this.setState({word: e.target.value})}\n            />\n            <input \n              id='description' \n              placeholder=\"Description i.e. 'A front end js framework.'\"\n              value = {this.state.description}\n              onChange = {(e) => this.setState({description: e.target.value})}\n            />\n            <br/>\n            <button \n              id='create-card__button'\n              onClick={() => {\n               \n                if (this.state.word.length === 0 || this.state.description.length === 0) {\n                  this.setState({showError: !this.state.showError});\n                  setTimeout(() => this.hideError(), 2000);\n                } else {\n                  this.props.onShadowClick();\n                  const word = new Immutable.Map({word: this.state.word, description: this.state.description});\n                  this.props.onCreateCard(word);  \n                }\n              }}\n            >\n                Create!\n            </button>\n            <div className='create-card__error'>\n              {errorMessage}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showModal: false\n    }\n  }\n   \n  render() {\n    return (\n      <div className='header'>\n        <div className='header-content header-content__left'>\n          \n        </div>\n        <div className='header-content header-content__middle'>\n          Flash Cards\n        </div>\n        <div className='header-content header-content__right'>\n          \n        </div>\n      </div>\n    )\n  }\n}\nclass Card extends React.Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      showAnswer: false\n    }\n  }\n \n  render() {\n    const content = this.state.showAnswer ? this.props.backContent : this.props.frontContent;\n    const iconClass = this.state.showAnswer ? 'reply' : 'share';\n    const cardClass = this.state.showAnswer ? 'back' : '';\n    const contentClass = this.state.showAnswer ? 'back' : 'front';\n    const actionClass = this.state.showAnswer ? 'active' : '';\n\n    return (\n      <div \n        className={`card ${cardClass}`}\n        onClick={() => this.setState({showAnswer: !this.state.showAnswer})}\n      >\n      <span className='card__counter'>{this.props.cardNumber + 1}</span>\n        <div \n          className='card__flip-card'\n          onClick={ () => {\n            this.setState({showAnswer: !this.state.showAnswer});\n          }}\n        >\n\n          <span className={`fa fa-${iconClass}`}/>\n        </div>\n        <div className={`card__content--${contentClass}`}>\n          {content}\n        </div>\n        <div className={`card__actions ${actionClass}`}>\n          <div \n            className='card__prev-button'\n            onClick={() => {\n              this.props.showPrevCard();\n              this.setState({showAnswer: false});\n            }}\n          >\n            PREV\n          </div>\n          <div \n            className='card__next-button'\n            onClick={() => {\n              this.props.showNextCard();\n              this.setState({showAnswer: false});\n            }}\n          >\n           NEXT\n           \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass CardContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cards: Immutable.fromJS([{\n        word: '2 x 2 matrix determinant',\n        description: 'ad - bc',\n      }, {\n        word: 'nxn matrix determinant',\n        description: \"choose any row or column. Multiply each entry in row / cil by entry's cifactor. Sum up entry ( cofactor ) products from entire row / column and blah blah blah\",\n      }, {\n        word: 'determinant of a triangular matrix',\n        description: 'diagonal entries',\n      }, {\n        word: 'Properties of the determinant',\n        description: 'det ANT = det A',\n      }, {\n        word: 'area of parallelogram',\n        description: 'determinant of matrix (abs valve). vectors size 2',\n      }, {\n        word: 'Volume of parallelepiped',\n        description: 'absolute value of matrix. vectors size 3',\n      }, {\n        word: \"Cramer's Rule\",\n        description: \"use det (A ) , det ( A1 ) , der ( A z ). det ( A. ) / det (A ) det (As ) / det (A)\",\n      }\n    ]),\n      cardNumber: 0\n    };\n    this.boundCallback = this.hideCreateCard.bind(this);\n    this.boundCreateCard = this.setCard.bind(this);\n    this.boundShowPrevCard = this.showPrevCard.bind(this);\n    this.boundShowNextCard = this.showNextCard.bind(this);\n  }\n  \n  hideCreateCard() {\n    this.setState({showModal: false});\n  }\n  \n  showNextCard() {\n    if ((this.state.cardNumber + 1) !== this.state.cards.size) {\n      this.setState({cardNumber: this.state.cardNumber += 1});\n    }\n  }\n  \n  showPrevCard() {\n    if (this.state.cardNumber !== 0) {\n      this.setState({cardNumber: this.state.cardNumber -= 1});\n    }\n  }\n  \n  setCard(card) {\n    const newCards = this.state.cards.push(card);\n    this.setState({cards: newCards});\n  }\n  \n  generateCards() {\n    const cards = this.state.cards;\n     const cardsList = cards.map((card) => {\n        return (\n          <Card \n            frontContent={card.get('word')}\n            backContent={card.get('description')}\n            showNextCard={this.boundShowNextCard}\n            showPrevCard = {this.boundShowPrevCard}\n            cardNumber={this.state.cardNumber}\n          />\n          );\n      })\n     return(cardsList.toJS()[this.state.cardNumber]); \n  }\n  render() {\n    return (\n      <div>\n        <span \n            className='card-container__icon  fa fa-plus' \n            onClick={() => {\n              this.setState({showModal: !this.state.showModal});\n            }}\n          />\n        {this.state.showModal \n          ? <CreateCard \n              onShadowClick={this.boundCallback}\n              onCreateCard={this.boundCreateCard}\n            /> \n          : ''}\n        {this.generateCards()}\n      </div>\n   );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className='wrapper'>\n        <Header />\n        <div className='content-wrapper'>\n          <CardContainer />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}